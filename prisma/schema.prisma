// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "/app/generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ===== Core / Users & Roles =====
model users {
  id            Int           @id @default(autoincrement())
  name          String
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password_hash String
  role_id       Int?
  status        Int           @default(1)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  role          ms_role?      @relation(fields: [role_id], references: [id])
  admin         ms_admin?
  member        ms_member?
  affiliate     ms_affiliate?
  vendor        ms_vendor?
  redemptions     ms_voucher_redeem[]

  @@index([role_id])
}

model ms_role {
  id         Int      @id @default(autoincrement())
  code_role  String   @unique
  name_role  String
  status     Int      @default(1)
  flag       Int      @default(1)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  users users[]
}

/// ===== Admin / Member / Affiliate / Vendor =====
model ms_admin {
  id          Int      @id @default(autoincrement())
  code_admin  String   @unique
  name_admin  String
  email       String   @unique
  address     String?
  city        String?
  province    String?
  postal_code String?
  image       String?
  twitter     String?
  instagram   String?
  tiktok      String?
  user_id     Int      @unique
  status      Int      @default(1)
  flag        Int      @default(1)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  Int?
  updated_by  Int?

  user users @relation(fields: [user_id], references: [id])
}

model ms_member {
  id           Int      @id @default(autoincrement())
  code_member  String   @unique
  name_member  String
  email        String   @unique
  address      String?
  city         String?
  province     String?
  postal_code  String?
  image        String?
  twitter      String?
  instagram    String?
  tiktok       String?
  user_id      Int?     @unique
  status       Int      @default(1)
  flag         Int      @default(1)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  created_by   Int?
  updated_by   Int?
  affiliate_id Int?

  user        users?                @relation(fields: [user_id], references: [id])
  affiliate   ms_affiliate?         @relation(fields: [affiliate_id], references: [id])
  orders      trx_orders[]
  commissions affiliate_commision[]

  @@index([affiliate_id])
}

model ms_affiliate {
  id             Int      @id @default(autoincrement())
  code_affiliate String   @unique
  name_affiliate String
  email          String   @unique
  address        String?
  city           String?
  province       String?
  postal_code    String?
  image          String?
  twitter        String?
  instagram      String?
  tiktok         String?
  user_id        Int?     @unique
  status         Int      @default(1)
  flag           Int      @default(1)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  created_by     Int?
  updated_by     Int?
  referral_code  String   @unique

  user        users?                @relation(fields: [user_id], references: [id])
  members     ms_member[]
  commissions affiliate_commision[]
}

model ms_vendor {
  id          Int      @id @default(autoincrement())
  code_vendor String   @unique
  name        String
  email       String?  @unique
  address     String?
  city        String?
  province    String?
  postal_code String?
  image       String?
  twitter     String?
  instagram   String?
  tiktok      String?
  user_id     Int?     @unique
  status      Int      @default(1)
  flag        Int      @default(1)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  Int?
  updated_by  Int?

  user     users?        @relation(fields: [user_id], references: [id])
  vouchers ms_vouchers[]
  redemptions     ms_voucher_redeem[]
}

/// ===== Voucher Catalog =====
model category_vouchers {
  id            Int      @id @default(autoincrement())
  category_name String
  status        Int      @default(1)
  created_at    DateTime @default(now())
  created_by    Int?
  updated_at    DateTime @updatedAt
  updated_by    Int?

  vouchers ms_vouchers[]
}

model ms_vouchers {
  id                  Int       @id @default(autoincrement())
  code_voucher        String    @unique
  vendor_id           Int
  category_voucher_id Int
  title               String?
  description         String?
  inventory           Int       @default(0)
  price               Decimal   @db.Decimal(12, 2)
  weight              Decimal?  @db.Decimal(10, 2)
  dimension           String?
  status              Int       @default(1)
  flag                Int       @default(1)
  voucher_start       DateTime?
  voucher_end         DateTime?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  created_by          Int?
  updated_by          Int?
  monthly_usage_limit Int?      @default(3)

  vendor     ms_vendor         @relation(fields: [vendor_id], references: [id])
  category   category_vouchers @relation(fields: [category_voucher_id], references: [id])
  images     ms_vouchers_image[]
  orderItems trx_orders_detail[]
  redemptions         ms_voucher_redeem[]


  @@index([vendor_id])
  @@index([category_voucher_id])
}



model ms_vouchers_image {
  id         Int      @id @default(autoincrement())
  voucher_id Int
  image      String
  flag       Int      @default(1)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  voucher ms_vouchers @relation(fields: [voucher_id], references: [id])

  @@index([voucher_id])
}

/// ===== Orders =====
model trx_orders {
  id              Int      @id @default(autoincrement())
  code_trx        String   @unique
  member_id       Int
  totalAmount     Decimal  @db.Decimal(14, 2)
  payment_methode String
  status          Int      @default(1)
  flag            Int      @default(1)
  date_order      DateTime @default(now())
  created_at      DateTime @default(now())
  created_by      Int?
  updated_at      DateTime @updatedAt
  updated_by      Int?

  member ms_member           @relation(fields: [member_id], references: [id])
  items  trx_orders_detail[]

  @@index([member_id])
}

model trx_orders_detail {
  id         Int      @id @default(autoincrement())
  order_id   Int
  voucher_id Int
  qty        Int      @default(1)
  price      Decimal  @db.Decimal(12, 2)
  sub_total  Decimal  @db.Decimal(14, 2)
  status     Int      @default(1)
  flag       Int      @default(1)
  created_at DateTime @default(now())
  created_by Int?
  updated_at DateTime @updatedAt
  updated_by Int?

  order   trx_orders  @relation(fields: [order_id], references: [id])
  voucher ms_vouchers @relation(fields: [voucher_id], references: [id])

  @@index([order_id])
  @@index([voucher_id])
}

model ms_voucher_redeem {
  id          Int       @id @default(autoincrement())
  voucher_id  Int
  user_id     Int
  vendor_id   Int
  order_id    Int?        
  source      String?
  device_info String?
  ip_address  String?
  status      Int       @default(1)
  note        String?
  redeemed_at DateTime  @default(now())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  voucher ms_vouchers @relation(fields: [voucher_id], references: [id])
  user    users       @relation(fields: [user_id], references: [id])
  vendor  ms_vendor   @relation(fields: [vendor_id], references: [id])

  // HAPUS baris berikut:
  // @@unique([voucher_id, user_id])

  // TETAPKAN untuk idempotency:
  @@unique([order_id])

  @@index([user_id])
  @@index([vendor_id])
  @@index([redeemed_at])
}

/// ===== Affiliate Commission =====
model affiliate_commision {
  id          Int      @id @default(autoincrement())
  affilate_id Int
  member_id   Int
  commision   Decimal  @db.Decimal(12, 2)
  status      Int      @default(1)
  flag        Int      @default(1)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  Int?
  updated_by  Int?

  affiliate ms_affiliate @relation(fields: [affilate_id], references: [id])
  member    ms_member    @relation(fields: [member_id], references: [id])

  @@index([affilate_id])
  @@index([member_id])
}
